/* This file is automatically generated from MailProtocol, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. Don't modify it. */
#if !COMPILE_PROTOCOL
using System;
using System.Collections.Generic;
using EasyGame;


	/// <exclude/>
	[ServiceAuxiliary(Type = typeof(IMailServer), Stub = typeof(IMailServerStub))]
	public interface IMailServerImpl
	{
		void Subscribe(Session session, string userId);
		void Unsubscribe(Session session, string userId);
	}
	/// <exclude/>
	public class IMailServerStub : StubBase
	{
		public IMailServerStub()
		{
			AddMethodDispatcher(1, Subscribe_1);
			AddMethodDispatcher(2, Unsubscribe_2);
		}

		static BinaryStreamWriter Subscribe_1(object __serviceObj, Session __client, BinaryStreamReader __reader)
		{
			var __timer = TimeCounter.BeginNew();
			IMailServerImpl __service = (IMailServerImpl)__serviceObj;
			string userId;
			__reader.Read(out userId);
		#if (DEBUG || LOG_PROTOCOL)
			Log.Debug("Subscribe userId: {0}", userId);
		#endif
			__service.Subscribe(__client, userId);
			PerfStatistic.AddItem("IMailServer.Subscribe", (int)__timer.End());
			return null;
		}
		static BinaryStreamWriter Unsubscribe_2(object __serviceObj, Session __client, BinaryStreamReader __reader)
		{
			var __timer = TimeCounter.BeginNew();
			IMailServerImpl __service = (IMailServerImpl)__serviceObj;
			string userId;
			__reader.Read(out userId);
		#if (DEBUG || LOG_PROTOCOL)
			Log.Debug("Unsubscribe userId: {0}", userId);
		#endif
			__service.Unsubscribe(__client, userId);
			PerfStatistic.AddItem("IMailServer.Unsubscribe", (int)__timer.End());
			return null;
		}
	}
#endif
